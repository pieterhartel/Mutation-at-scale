class,comment,contract,mutant,SLOC,line,operator,status,notes,details
5,1,,,,,,,,"Base=Regression_*/mall_7f683d.dir; for i in 39 12 1 30 29 6 41 47 35 34 13 14 49 36 26 28 46 10 17 22 7 38 42 11 5 44 8 31 32 48 27 40 50 19 20 33 43 21 4 23 25 18 3 2 24 9 37 45 15 16; do vi $Base/contracts/*_${i}.*mut $Base/*_${i}.*diff; done,,,,,,,"
5,0,mall_7f683d,1,84,12,RAR,Killed by output,Error found,"replacing msg.sender by address(0) in 'owner = msg.sender' should block all method calls. However at line 74, in the definition of the method getCommodityInfoById the modifier onlyOwner is missing; the method can therefore still be called. This is an error found by mutation."
5,0,mall_7f683d,2,84,74,AOR,Not killed,Semantically equivalent,"replacing = by += in 'seedBlock = commodities[commodityIndex].seedBlock' leads to a semantically equivalent contract, as seedBlock is a return variable (initialized to 0)."
5,0,mall_7f683d,3,84,73,LR_I,Killed by output,Ok,"replacing 1 by 0 in 'require(commodityIndex >= 1)' causes a call to getCommodityInfoById with commodityId=0 to succeed whereas it should fail."
5,0,mall_7f683d,4,84,70,VDTSCS,Killed by output,Ok,"swapping commodityIndex and seedBlock in 'function getCommodityInfoById(uint commodityId) public view returns (uint commodityIndex, uint seedBlock, string MD5)' initializes commodityIndex to 0 and causes an array out of bounds exception."
5,0,mall_7f683d,5,84,60,ITSCR,Killed by output,Ok,"replacing commodityIndex by seedBlock in 'require(commodityIndex >= 1)' forces an exception because seedBlock is initialized to 0."
5,0,mall_7f683d,6,84,21,ESD,Killed by output,Ok,"replacing 'owner = newOwner' by true leaves the owner of the contract what it is so that after the call to transferOwnership the onlyOwner modifier will start to throw exceptions."
5,0,mall_7f683d,7,84,51,ITSCR,Killed by output,Ok,"replacing seedBlock by commodityIndex in 'commodities[commodityIndex] = Commodity(commodityId, seedBlock, MD5)' stores the wrong data, which when queried again causes the output to be different from what is expected."
5,0,mall_7f683d,8,84,60,LR_I,Killed by output,Ok,"replacing 1 by 0 in 'require(commodityIndex >= 1)' causes a call to getCommodityInfoByIndex with commodityIndex=0 to succeed whereas it should fail."
5,0,mall_7f683d,9,84,74,ESD,Killed by output,Ok,"replacing 'seedBlock = commodities[commodityIndex].seedBlock' by true causes seedBlock to be always 0, hence the output is different from what is expected."
5,0,mall_7f683d,10,84,50,ESD,Killed by output,Ok,"replacing 'indexMap[commodityId] = commodityIndex' by true leaves data initialised to 0 by default, which when queried again causes the output to be different from what is expected."
5,0,mall_7f683d,11,84,59,ITSCR,Killed by output,Ok,"replacing commodityIndex by seedBlock in 'require(commodityIndex < commodityNum)' causes a call to getCommodityInfoByIndex with commodityId=0 to succeed whereas it should fail."
5,0,mall_7f683d,12,84,11,TRD,Not killed,Semantically equivalent,"replacing public by internal in 'constructor() public' in a constructor that should have been internal in the first place improves the security of the contract."
5,0,mall_7f683d,13,84,48,ITSCR,Not killed,New test needed,"replacing commodityId by commodityIndex in 'require(indexMap[commodityId] == 0)' is not killed because none of the tests use a commodityId of 0, whereas commodityIndex as a return parameter is initialised to 0. A new test should be added that uses a commodityIndex of 0, e.g. newCommodity( 0, ... )."
5,0,mall_7f683d,14,84,48,BOR,Killed by output,Ok,"replacing == by > in 'require(indexMap[commodityId] == 0)' causes all calls to newCommodity to fail, where they should succeed."
5,0,mall_7f683d,15,84,82,LR_I,Killed by output,Ok,"replacing 1 by 0 in 'num = commodityNum - 1' causes all calls to getCommodityNum to return a wrong result."
5,0,mall_7f683d,16,84,82,LR_I,Killed by output,Ok,"replacing 1 by 2, rest the same as #15."
5,0,mall_7f683d,17,84,50,AOR,Killed by gas,Semantically equivalent,"replacing = by += in 'indexMap[commodityId] = commodityIndex' is a semantically equivalent mutation, as the check 'require(indexMap[commodityId] == 0)' at line 52 ensures that commodityIndex is added to 0."
5,0,mall_7f683d,18,84,73,ESD,Killed by output,Ok,"replacing 'require(commodityIndex >= 1)' by true, rest the same as #11."
5,0,mall_7f683d,19,84,62,ITSCR,Killed by output,Ok,"replacing commodityIndex by seedBlock in 'seedBlock = commodities[commodityIndex].seedBlock' causes seedBlock to be always commodities[0], hence the output is different from what is expected."
5,0,mall_7f683d,20,84,62,ITSCR,Killed by output,Ok,"replacing the L-Value seedBlock by commodityIndex in 'seedBlock = commodities[commodityIndex].seedBlock' causes seedBlock to be always 0, and commodityId to have the value of seedBlock, hence the output is different from what is expected."
5,0,mall_7f683d,21,84,70,TRD,Killed by output,Ok,"replacing public by private in 'function getCommodityInfoById(uint commodityId) public view' blocks access ton the method so that all calls fail."
5,0,mall_7f683d,22,84,51,ESD,Killed by output,Ok,"replacing 'commodities[commodityIndex] = Commodity(commodityId, seedBlock, MD5)' by true blocks storage of all data, which when queried again causes the output to be different from what is expected."
5,0,mall_7f683d,23,84,71,ITSCR,Killed by output,Ok,"replacing commodityId by seedBlock in 'commodityIndex = indexMap[commodityId]' causes array out of bounds exceptions, because seedBlock has much large values than the domain of the array."
5,0,mall_7f683d,24,84,74,ITSCR,Killed by output,Ok,"replacing the L-Value seedBlock by commodityId in 'seedBlock = commodities[commodityIndex].seedBlock' causes seedBlock to be always 0, hence the output is different from what is expected."
5,0,mall_7f683d,25,84,71,ESD,Killed by output,Ok,"replacing 'commodityIndex = indexMap[commodityId]' by true removes the initialisations of commodityIndex, which is therefore stuck at 0. This creates an array out of bounds exception."
5,0,mall_7f683d,26,84,49,UORD,Killed by output and gas,Ok,"replacing ++ by -- in 'commodityIndex = commodityNum++' causes underflow already at the first attempt to store some data."
5,0,mall_7f683d,27,84,61,ITSCR,Killed by output,Ok,"replacing commodityIndex by seedBlock in 'commodityId = commodities[commodityIndex].commodityId' causes the return parameter commodityId to be stuck at 0."
5,0,mall_7f683d,28,84,50,ITSCR,Killed by output,Ok,"replacing commodityId by seedBlock in 'indexMap[commodityId] = commodityIndex' causes an array out of bounds exception."
5,0,mall_7f683d,29,84,16,RAR,Killed by output,Ok,"replacing msg.sender by address(0) in 'require (msg.sender == owner)' blocks all method calls, which should therefore all fail. However, the newCommodity calls in transactions 26,27,38 & 39 are duplicates of earlier transactions and therefore fail also in the original. It is not possible to differentiate the reason for failure."
5,0,mall_7f683d,30,84,12,ESD,Killed by output,Ok,"replacing 'owner = msg.sender' by true leaves owner initialised to 0, thus blocking all method calls. Rest same as #29."
5,0,mall_7f683d,31,84,60,BOR,Killed by output,Ok,"replacing != by >= in 'require(commodityIndex >= 1)', rest as #08."
5,0,mall_7f683d,32,84,60,LR_I,Killed by output,Ok,"replacing 1 by 2 in 'require(commodityIndex >= 1)', rest as #08."
5,0,mall_7f683d,33,84,62,ESD,Killed by output,Ok,"replacing 'seedBlock = commodities[commodityIndex].seedBlock' by true causes seedBlock to be always 0, hence the output is different from what is expected."
5,0,mall_7f683d,34,84,47,VDTSCS,Killed by output,Ok,"swapping commodityId and commodityIndex in 'function newCommodity(uint commodityId, uint seedBlock, string MD5) onlyOwner public returns (uint commodityIndex)' initializes commodityId to 0 and causes wrong values to be returned."
5,0,mall_7f683d,35,84,47,TRD,Killed by gas,Semantically equivalent,"replacing public by external in 'function newCommodity(uint commodityId, uint seedBlock, string MD5) onlyOwner public'"
5,0,mall_7f683d,36,84,49,AOR,Killed by gas,Semantically equivalent,"replacing = by += in 'commodityIndex = commodityNum++' is semantically equivalent because commodityIndex is initialised to 0, then added to instead of directly assigned."
5,0,mall_7f683d,37,84,82,ESD,Killed by output,Ok,"replacing 'num = commodityNum - 1' by true, rest the same as #15."
5,0,mall_7f683d,38,84,58,VDTSCS,Killed by output,Ok,"swapping commodityId and commodityIndex in 'function getCommodityInfoByIndex(uint commodityIndex) onlyOwner public view returns (uint commodityId, uint seedBlock, string MD5)' initializes commodityIndex to 0 and causes getCommodityInfoByIndex to throw an exception."
5,0,mall_7f683d,39,84,9,TRD,Killed by output,Ok,"removing public in 'address public owner' blocks all calls to getter method of the owner variable."
5,0,mall_7f683d,40,84,61,ITSCR,Killed by output,Ok,"replacing commodityId by commodityIndex in 'commodityId = commodities[commodityIndex].commodityId' leaves commodityId initialised to the default value, which will be different from the true Id."
5,0,mall_7f683d,41,84,29,VDTSCS,Killed by output,Ok,"swapping commodityId and seedBlock in the definition of struct 'Commodity {uint commodityId; uint seedBlock; string MD5;}' causes wrong positional values to be entered in the call at Line 55 : 'Commodity(commodityId, seedBlock, MD5)'. These wrong values will be returned by the various getter functions."
5,0,mall_7f683d,42,84,59,ESD,Killed by output,Ok,"replacing 'require(commodityIndex < commodityNum)' by true, rest the same as #11."
5,0,mall_7f683d,43,84,70,VDTSCS,Killed by output,Ok,"swapping commodityIndex and seedBlock in 'function getCommodityInfoByIndex(uint commodityIndex) onlyOwner public view returns (uint commodityId, uint seedBlock, string MD5)' returns wrong values."
5,0,mall_7f683d,44,84,60,ESD,Killed by output,Ok,"replacing 'require(commodityIndex >= 1)' by true causes a call to getCommodityInfoByIndex with commodityIndex=0 to succeed whereas it should fail."
5,0,mall_7f683d,45,84,82,AOR,Killed by output,Ok,"replacing = by -= in 'num = commodityNum - 1' by true, rest the same as #15."
5,0,mall_7f683d,46,84,50,ITSCR,Killed by output,Ok,"replacing 'indexMap[commodityId] = commodityIndex' by true leaves data initialised to 0 by default, which when queried again causes the output to be different from what is expected."
5,0,mall_7f683d,47,84,41,LR_I,Killed by output,Ok,"replacing 0 by 1 in 'commodityNum = 1' breaks the initialisation causes all data to end up in the wrong place."
5,0,mall_7f683d,48,84,61,AOR,Killed by output,Ok,"replacing = by -= in 'commodityId = commodities[commodityIndex].commodityId' negates the stored commodityId, which will break the data base."
5,0,mall_7f683d,49,84,49,ITSCR,Killed by output,Ok,"replacing the L-Value commodityIndex by commodityId in 'commodityIndex = commodityNum++' overwrites the CommdityId and leave the commodityIndex un initialised. This creates wrong outputs."
5,0,mall_7f683d,50,84,61,ITSCR,Killed by output,Ok,"replacing commodityIndex by commodityId in 'commodityId = commodities[commodityIndex].commodityId' causes the wrong output to be returned."
